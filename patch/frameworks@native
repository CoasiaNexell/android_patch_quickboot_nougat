diff --git cmds/servicemanager/service_manager.c cmds/servicemanager/service_manager.c
index 68e3ceb..4c8e47d 100644
--- cmds/servicemanager/service_manager.c
+++ cmds/servicemanager/service_manager.c
@@ -372,6 +372,10 @@ static int audit_callback(void *data, __unused security_class_t cls, char *buf,
 int main()
 {
     struct binder_state *bs;
+	struct sched_param param = {
+		.sched_priority = 1,
+	};
+	sched_setscheduler(0, SCHED_FIFO, &param);
 
     bs = binder_open(128*1024);
     if (!bs) {
diff --git services/surfaceflinger/RenderEngine/RenderEngine.cpp services/surfaceflinger/RenderEngine/RenderEngine.cpp
index d6a032f..e1eb64a 100644
--- services/surfaceflinger/RenderEngine/RenderEngine.cpp
+++ services/surfaceflinger/RenderEngine/RenderEngine.cpp
@@ -134,6 +134,7 @@ RenderEngine* RenderEngine::create(EGLDisplay display, int hwcFormat) {
     }
     engine->setEGLHandles(config, ctxt);
 
+#if 0
     ALOGI("OpenGL ES informations:");
     ALOGI("vendor    : %s", extensions.getVendor());
     ALOGI("renderer  : %s", extensions.getRenderer());
@@ -141,6 +142,7 @@ RenderEngine* RenderEngine::create(EGLDisplay display, int hwcFormat) {
     ALOGI("extensions: %s", extensions.getExtension());
     ALOGI("GL_MAX_TEXTURE_SIZE = %zu", engine->getMaxTextureSize());
     ALOGI("GL_MAX_VIEWPORT_DIMS = %zu", engine->getMaxViewportDims());
+#endif
 
     eglMakeCurrent(display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
     eglDestroySurface(display, dummy);
@@ -421,6 +423,7 @@ EGLConfig RenderEngine::chooseEglConfig(EGLDisplay display, int format) {
     }
 
     // print some debugging info
+#if 0
     EGLint r,g,b,a;
     eglGetConfigAttrib(display, config, EGL_RED_SIZE,   &r);
     eglGetConfigAttrib(display, config, EGL_GREEN_SIZE, &g);
@@ -432,6 +435,7 @@ EGLConfig RenderEngine::chooseEglConfig(EGLDisplay display, int format) {
     ALOGI("extensions: %s", eglQueryString(display, EGL_EXTENSIONS));
     ALOGI("Client API: %s", eglQueryString(display, EGL_CLIENT_APIS)?:"Not Supported");
     ALOGI("EGLSurface: %d-%d-%d-%d, config=%p", r, g, b, a, config);
+#endif
 
     return config;
 }
diff --git services/surfaceflinger/SurfaceFlinger_hwc1.cpp services/surfaceflinger/SurfaceFlinger_hwc1.cpp
index b32f652..2f5b313 100644
--- services/surfaceflinger/SurfaceFlinger_hwc1.cpp
+++ services/surfaceflinger/SurfaceFlinger_hwc1.cpp
@@ -162,6 +162,7 @@ SurfaceFlinger::SurfaceFlinger()
 {
     ALOGI("SurfaceFlinger is starting");
 
+#if 0
     // debugging stuff...
     char value[PROPERTY_VALUE_MAX];
 
@@ -185,6 +186,12 @@ SurfaceFlinger::SurfaceFlinger()
     property_get("debug.sf.disable_hwc_vds", value, "0");
     mUseHwcVirtualDisplays = !atoi(value);
     ALOGI_IF(!mUseHwcVirtualDisplays, "Disabling HWC virtual displays");
+#else
+    mGpuToCpuSupported = 1;
+    mDebugRegion = 0;
+    mDebugDDMS = 0;
+    mUseHwcVirtualDisplays = 1;
+#endif
 }
 
 void SurfaceFlinger::onFirstRef()
@@ -542,6 +549,7 @@ void SurfaceFlinger::init() {
 
     // start boot animation
     startBootAnim();
+    ALOGI("%s END", __func__);
 }
 
 int32_t SurfaceFlinger::allocateHwcDisplayId(DisplayDevice::DisplayType type) {
diff --git services/surfaceflinger/main_surfaceflinger.cpp services/surfaceflinger/main_surfaceflinger.cpp
index 53a63bd..2967db6 100644
--- services/surfaceflinger/main_surfaceflinger.cpp
+++ services/surfaceflinger/main_surfaceflinger.cpp
@@ -41,9 +41,16 @@ int main(int, char**) {
     // instantiate surfaceflinger
     sp<SurfaceFlinger> flinger = new SurfaceFlinger();
 
+#if 0
     setpriority(PRIO_PROCESS, 0, PRIORITY_URGENT_DISPLAY);
 
     set_sched_policy(0, SP_FOREGROUND);
+#else
+    struct sched_param sched_param = {
+	    .sched_priority = 1,
+    };
+    sched_setscheduler(0, SCHED_FIFO, &sched_param);
+#endif
 
 #ifdef ENABLE_CPUSETS
     // Put most SurfaceFlinger threads in the system-background cpuset
